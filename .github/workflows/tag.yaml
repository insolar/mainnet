name: mainnet
on:
  push:
    tags:
      - '*'
env:
  GO_VERSION: 1.12.15
jobs:
  build-pack-release:
    name: build-pack-release
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@master
      - name: gather info
        id: info
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=build_date::$(shell ./scripts/dev/git-date-time.sh -d)"
          echo "::set-output name=build_time::$(shell ./scripts/dev/git-date-time.sh -t)"
          echo "::set-output name=build_version::$(git describe --tags)"
      - name: pack project
        run: |
          docker build -t insolar:${{ steps.info.outputs.build_version }} --pull --build-arg "GOLANG_VERSION=${{env.GO_VERSION}}" --build-arg "BUILD_NUMBER=$GITHUB_RUN_NUMBER" --build-arg "BUILD_DATE=${{ steps.info.outputs.build_date }}" --build-arg "BUILD_TIME=${{ steps.info.outputs.build_time }}" --build-arg "BUILD_HASH=${{ steps.info.outputs.sha_short }}" --build-arg "BUILD_VERSION=${{ steps.info.outputs.build_version }}" .
          docker tag insolar:${{ steps.info.outputs.build_version }} insolar/mainnet:${{ steps.info.outputs.build_version }}
          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
          docker push insolar/mainnet:${{ steps.info.outputs.build_version }}
      - name: copy artifacts
        run: |
          id=$(docker create insolar/mainnet:${{ steps.info.outputs.build_version }})
          mkdir bin
          docker cp $id:/usr/local/bin/insolar bin/
          docker cp $id:/usr/local/bin/insolard bin/
          docker cp $id:/usr/local/bin/keeperd bin/
          docker cp $id:/usr/local/bin/pulsard bin/
          docker cp $id:/usr/local/bin/pulsewatcher bin/
      - name: create GH release
        id: create_release
        uses: actions/create-release@becafb2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: attach insolar binary to GH release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/insolar
          asset_name: insolar
          asset_content_type: application/octet-stream
      - name: attach insolard binary to GH release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/insolard
          asset_name: insolard
          asset_content_type: application/octet-stream
      - name: attach keeperd binary to GH release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/keeperd
          asset_name: keeperd
          asset_content_type: application/octet-stream
      - name: attach pulsard binary to GH release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/pulsard
          asset_name: pulsard
          asset_content_type: application/octet-stream
      - name: build rpm
        run: |
          mkdir -p scripts/rpm/content/usr/local/bin scripts/rpm/content/etc/insolar
          cp bin/{insolar,insolard,keeperd,pulsard,pulsewatcher} scripts/rpm/content/usr/local/bin/
          cp application/api/spec/{api-exported.yaml,api-exported-internal.yaml} scripts/rpm/content/etc/insolar/

          docker run \
            --rm \
            -v $(pwd)/scripts/rpm:/src \
            ruby:2.7-alpine \
            sh -c "apk -u add rpm libc-dev make gcc; \
                   gem install fpm; \
                   fpm -s dir -t rpm -C /src/content -p /src \
                     --replaces insolar \
                     -n insolar-mainnet \
                     -v ${{ steps.info.outputs.build_version }} \
                     --after-install /src/after-install.sh \
                     --after-upgrade /src/after-upgrade.sh \
                     --after-remove /src/after-remove.sh \
                     --before-install /src/before-install.sh \
                     --before-upgrade /src/before-upgrade.sh \
                     --before-remove /src/before-remove.sh"
      - name: push rpm to repo
        run: |
          curl \
            -u ${{ secrets.RPM_REPO_USER }}:${{ secrets.RPM_REPO_PASSWORD }} \
            --upload-file scripts/rpm/*.rpm \
            ${{ secrets.RPM_REPO_URL }}
