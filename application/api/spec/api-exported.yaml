openapi: 3.0.0
info:
  version: 1.1.1
  title: Insolar API
  contact:
    name: Insolar dev team
    url: 'https://insolar.io/about#team'
    email: dev-support@insolar.io
  description: >
    # MainNet API documentation


    Welcome to [Insolar](https://github.com/insolar/insolar) documentation for
    the MainNet JSON RPC 2.0 API.


    The API allows to manage members (Insolar users) and their transactions.


    # Definitions Overview


    Insolar is being developed to provide interoperability between enterprises.


    From a business perspective:

      * Any enterprise is regarded as an *entity* with a corresponding *identity* — a **member** object stored in the blockchain.
      * Any member has its own *account* to/from which the member can transfer funds.

    From a technical perspective:

      * Every member object is identified by a **reference** in the blockchain.
      * The reference is effectively the member's *address*.

    Therefore, an entity wishing to transfer funds to/from its account from/to a
    particular address, in Insolar's terms, is a member object identified by its
    reference wishing to transfer funds to some other member identified by the
    corresponding reference.


    Insolar uses these terms in method and parameter names.


    # Request Specification


    Insolar has two types of requests that have the same *base* structure in
    accordance with the [JSON RPC 2.0](https://www.jsonrpc.org/specification)
    specification:


    * [Information](#tag/Information) requests that do not require a seed.

    * Contract requests that do. These requests are described in
    [Member](#tag/Member) and [Migration](#tag/Migration) sections.


    Seed is a unique piece of information generated by a node. The seed:


    * has a short lifespan—10 minutes.

    * expires upon first use.

    * protects from request duplicates.


    The seed must be validated by the same node that generated it. Therefore,
    each subsequent contract request containing the seed must be sent to that
    node.


    To call a smart contract method, go through the following steps:


    1. Send a [getSeed](/#operation/get-seed) information request and receive
    the seed.

       For example, the `getSeed` request:

       ```json
       {
           "jsonrpc": "2.0",
           "id": 1,
           "method": "node.getSeed"
       }
       ```

       And the response to it:

       ```json
       {
         "jsonrpc": "2.0",
         "id": 1,
         "result": {
         "seed": "<seed>"
         }
       }
       ```

    2. Form and sign a contract request with the acquired seed. For example,
    [member.create](/#operation/member-create).

       Every contract request must contain the Digest and Signature HTTP headers. For example:

       ```
       POST /<endpoint> HTTP/1.1
       Host: <Host>
       Date: Tue, 07 Jun 2019 20:51:35 GMT
       Content-Type: application/json
       Digest: SHA-256=<hashString>
       Signature: keyId="public-key", algorithm="ecdsa", headers="digest", signature=<signatureString>

       { <payload> }
       ```

       And the contract request's `<payload>` with the seed. For example:

       ```json
       {
         "jsonprc": "2.0",
         "id": 2,
         "method": "contract.call",
         "params": {
           "seed": "<seed>",
           "callSite": "member.create",
           "callParams": {},
           "publicKey": "<pubicKey>"
         }
       }
       ```

       In this example:

       * [Digest HTTP header](https://tools.ietf.org/html/rfc3230#section-4.3.2) contains the Base64-encoded `<hashString>` with the SHA-256 hash of the payload's bytes.

       * [Signature HTTP header](https://tools.ietf.org/id/draft-cavage-http-signatures-11.html#sig-header) contains the Base64-encoded `<signatureString>` with the ECDSA (Elliptic Curve Digital Signature Algorithm) signature in the [ASN.1 DER format](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.690-201508-I!!PDF-E&type=items). Signed are the bytes of the hash from the Digest header.

       * `<pubicKey>` contains a Base64-encoded string with the ECDSA public key in [PEM format](https://tools.ietf.org/html/rfc1421).

       * `<seed>` contains the seed acquired in the previous `getSeed` request.

       * `"method": "contract.call"` designates a call to a contract method.

       * `callSite` is the contract method call point. In this case, `member.create`.

       * `callParams` are the contract method parameters.

    3. Send the formed and signed contract request to the node that generated
    the seed.

       Insolar responds to contract requests with:

       ```json
       {
         "jsonrpc": "2.0",
         "id": 2,
         "result": {
         "callResult": {
            "reference": <referenceString>
            },
         "requestReference": <requestReferenceString>,
         "traceID": <traceIDString>
         }
       }
       ```
       Where `"callResult"` contains the result of the contract method execution. In this case, it is a reference to a newly created member object since the `"callSite"` of the request is `"member.create"`.

    # Errors


    Insolar follows the JSON RPC API conventions on [error
    codes](https://www.jsonrpc.org/specification#error_object), with values
    `-31000`-`-31999` reserved for the Insolar network.


    Below is the list of Insolar MainNet errors.


    | **Code** | **Message**                                                 |

    |----------|-------------------------------------------------------------|

    | -31700   | Parsing error on the server side: received an invalid JSON. |

    | -31600   | The JSON received is not a valid request payload.           |

    | -31601   | Method does not exist/is not available.                   |

    | -31602   | Invalid method parameter(s).                                |

    | -31603   | Internal MainNet error.                                    |

    | -31106   | Request timeout has expired.                              |

    | -31401   | Action is not authorized.                                   |

    | -31429   | Service unavailable, try again later.                       |

    | -31103   | Execution error.                                            |


    # Versioning


    API changes in particular Insolar releases and uses the [SemVer
    2.0](https://semver.org/spec/v2.0.0.html) versioning system.


    API versions do not have to tally with Insolar MainNet versions.
servers:
  - url: 'https://wallet-api.insolar.io'
    description: MainNet
  - url: 'https://wallet-api.testnet.insolar.io'
    description: TestNet
paths:
  '/api/rpc#node.getSeed':
    post:
      summary: node.getSeed
      description: >

        Gets a new seed (random byte range).


        Each signed contract request has to contain a new seed in its body. Seed
        is a unique piece of information generated by a node and:

         * has a short lifespan—10 minutes.
         * expires upon first use.
         * protects from request duplicates.

        The seed must be validated by the same node that generated it.
        Therefore, each subsequent contract request containing the seed must be
        sent to that node.
      operationId: get-seed
      tags:
        - Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-RPCRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      enum:
                        - node.getSeed
                    params:
                      description: 'May be omitted, as the method does not require any.'
            example:
              jsonrpc: '2.0'
              method: node.getSeed
              id: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/definitions-responses-Seed-yaml'
                  - $ref: '#/components/schemas/response-unsignedRequestError'
              examples:
                success:
                  x-mock-call-count: -100
                  value:
                    jsonrpc: '2.0'
                    id: 1
                    result:
                      seed: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=
                error:
                  $ref: '#/components/examples/executionError'
  '/api/rpc#member.create':
    post:
      summary: member.create
      description: >
        Creates a new member object with a corresponding account and wallet.


        To invoke this method, specify a `publicKey` to associate with the new
        member.


        Returns a `reference` to the new member object.
      operationId: member-create
      tags:
        - Member
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      x-dredd-http-signed: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values to pass to the invoked method.
                      required:
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - member.create
                        callParams:
                          description: >-
                            Parameters of the contract's internal method. May be
                            omitted, as the method does not require any.
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key to associate with the new `member`
                            object. Used to check the `<signatureString>`
                            created by the paired private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
                          x-dredd-source:
                            hookMethod: newMemberKey
            example:
              jsonrpc: '2.0'
              method: contract.call
              id: 1
              params:
                seed: fhDEwRRbSnYnbMnALKMh8gXdzaSvRv/nfsGC9S7kqik=
                callSite: member.create
                publicKey: >-
                  -----BEGIN PUBLIC
                  KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC\nF3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==\n-----END
                  PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/response-member'
                  - $ref: '#/components/schemas/response-signedRequestError'
              examples:
                success:
                  value:
                    jsonrpc: '2.0'
                    id: 1
                    result:
                      callResult:
                        reference: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'
                      requestReference": >-
                        insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record
                      traceID: 0b9ac245-2522-4364-9059-efc17907ce54
                error:
                  $ref: '#/components/examples/executionError'
  '/api/rpc#member.get':
    post:
      summary: member.get
      description: >
        Gets information on an existing member and, effectively, authorizes the
        member on the Insolar network.


        To invoke this method, specify a `publicKey` associated with an existing
        member.


        Returns the following information:


        * (required) `reference` to the member object,

        * (optional) associated `migrationAddress`, if any; only during the
        period of token migration from the Ethereum network.
      operationId: member-get
      tags:
        - Member
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      x-dredd-http-signed: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values to pass to the invoked method.
                      required:
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - member.get
                        callParams:
                          description: >-
                            Parameters of the contract's internal method. May be
                            omitted, as the method does not require any.
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key of your `member` object. Used to check
                            the `<signatureString>` created by the paired
                            private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
            example:
              jsonrpc: '2.0'
              method: contract.call
              id: 1
              params:
                seed: fhDEwRRbSnYnbMnALKMh8gXdzaSvRv/nfsGC9S7kqik=
                callSite: member.get
                publicKey: >-
                  -----BEGIN PUBLIC
                  KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC\nF3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==\n-----END
                  PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/responses-memberWithMigration-yaml'
                  - $ref: '#/components/schemas/response-signedRequestError'
              examples:
                member-found:
                  value:
                    jsonrpc: '2.0'
                    id: 1
                    result:
                      callResult:
                        reference: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'
                        migrationAddress: '0xF4e1507486dFE411785B00d7D00A1f1a484f00E6'
                      requestReference: >-
                        insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record
                      traceID: 0b9ac245-2522-4364-9059-efc17907ce54
                execution-error:
                  $ref: '#/components/examples/executionError'
  '/api/rpc#member.migrationCreate':
    post:
      summary: member.migrationCreate
      description: >
        Creates a new `member` object with a corresponding account and wallet.


        To invoke this method, specify a `publicKey` to associate with the new
        member.


        Returns the following information:


        * `reference` to the  new member object,

        * associated `migrationAddress`; only during the period of token
        migration from the Ethereum network.
      operationId: member-migration-create
      tags:
        - Migration
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values to pass to the invoked method.
                      required:
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - member.migrationCreate
                        callParams:
                          description: >-
                            Parameters of the contract's internal method. May be
                            omitted, as the method does not require any.
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key to associate with the new `member`
                            object. Used to check the `<signatureString>`
                            created by the paired private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
            example:
              jsonrpc: '2.0'
              method: contract.call
              id: 1
              params:
                seed: fhDEwRRbSnYnbMnALKMh8gXdzaSvRv/nfsGC9S7kqik=
                callSite: member.migrationCreate
                publicKey: >-
                  -----BEGIN PUBLIC
                  KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC\nF3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==\n-----END
                  PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/responses-memberWithMigration-yaml'
                  - $ref: '#/components/schemas/response-signedRequestError'
  '/api/rpc#member.transfer':
    post:
      summary: member.transfer
      description: >
        Transfers an `amount` of XNS coin fractions from some member's account
        to another.


        To invoke this method, specify the following parameters:


        * in `params`: the member `reference` (returned by
        [member.create](/#operation/member-create)) to transfer XNS coin
        fractions from.

        * in `callParams`: the `toMemberReference` to transfer XNS coin
        fractions to.

        * in `params`: the `amount` of XNS coin fractions to transfer.


        Returns the fee value.
      operationId: member-transfer
      tags:
        - Member
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values to pass to the invoked method.
                      required:
                        - callParams
                        - reference
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - member.transfer
                        callParams:
                          description: Parameters of the contract's internal method.
                          required:
                            - amount
                            - toMemberReference
                          properties:
                            amount:
                              type: string
                              description: >
                                An integer amount of XNS coin fractions to
                                transfer. The smallest XNS fraction is
                                `1/10^10`. To specify the amount in fractions,
                                multiply XNS by `10^10`. For example: `0.1 XNS =
                                0.1 * 10^10 = 1000000000`.
                              example: '1000000000'
                              pattern: '^[1-9][0-9]*$'
                              minLength: 1
                              maxLength: 20
                            toMemberReference:
                              allOf:
                                - $ref: '#/components/schemas/reference'
                                - description: >-
                                    Reference to the recipient's `member`
                                    object.
                                  example: >-
                                    insolar:1AfNjPWh7Ut-P7Ky7Mj7HLCte3gjGXi4RpXNxTvrhlww
                        reference:
                          allOf:
                            - $ref: '#/components/schemas/reference'
                            - description: >-
                                Reference to your `member` object. Used for
                                identification.
                              example: >-
                                insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key of your `member` object. Used to check
                            the `<signatureString>` created by the paired
                            private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
                          example: >-
                            -----BEGIN PUBLIC KEY-----

                            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC

                            F3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==

                            -----END PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/definitions-responses-transfer-yaml'
                  - $ref: '#/components/schemas/response-signedRequestError'
              examples:
                success:
                  value:
                    jsonrpc: '2.0'
                    id: '1'
                    result:
                      callResult:
                        fee: '10'
                      requestReference: >-
                        insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record
                      traceID: 0b9ac245-2522-4364-9059-efc17907ce54
                execution-error:
                  $ref: '#/components/examples/executionError'
  '/api/rpc#deposit.transfer':
    post:
      summary: deposit.transfer
      description: >
        Transfers an `amount` of released XNS coin fractions from the member's
        deposit to the member's current account.


        To invoke this method, specify the following parameters:


        * in `callParams`: `ethTxHash`—deposit identifier.

        * in `params`: member `reference` to identify the account; this
        reference is returned by [member.create](/#operation/member-create).

        * in `params`: `amount` of XNS coin fractions to transfer.
      operationId: deposit-transfer
      tags:
        - Migration
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values to pass to the invoked method.
                      required:
                        - callParams
                        - reference
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - deposit.transfer
                        callParams:
                          description: Parameters of the contract's internal method.
                          required:
                            - amount
                            - ethTxHash
                          properties:
                            amount:
                              type: string
                              description: >
                                An integer amount of XNS coin fractions to
                                transfer. The smallest XNS fraction is
                                `1/10^10`. To specify the amount in fractions,
                                multiply XNS by `10^10`. For example: `0.1 XNS =
                                0.1 * 10^10 = 1000000000`.
                              example: '1000000000'
                              pattern: '^[1-9][0-9]*$'
                              minLength: 1
                              maxLength: 20
                            ethTxHash:
                              type: string
                              pattern: '^(0x[a-f0-9]{64}(_2)?|genesis_deposit)$'
                              description: >-
                                Ethereum transaction hash. Used for deposit
                                identification.
                              example: >-
                                0x21145195deb606bd75eab41a7afe38d7c3ae60a091cadc201f0ba489cbec8f09
                        reference:
                          allOf:
                            - $ref: '#/components/schemas/reference'
                            - description: >-
                                Reference to your `member` object. Used for
                                identification.
                              example: >-
                                insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key of your `member` object. Used to check
                            the `<signatureString>` created by the paired
                            private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
                          example: >-
                            -----BEGIN PUBLIC KEY-----

                            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC

                            F3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==

                            -----END PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/response-transferSuccess'
                  - $ref: '#/components/schemas/response-signedRequestError'
  '/api/rpc#staking.stake':
    post:
      summary: staking.stake
      description: >
        Transfers a specified `amount` of XNS coin fractions from a member's
        deposit or current account to the staking account.


        This effectively creates a bid and starts the staking process.


        To invoke this method, specify the following parameters in `callParams`:


        * `fromReference`—reference to the current account or deposit to
        transfer the coins from.

        * `toNodeReference`—reference to the node selected for staking.

        * `amount`—amount of XNS coin fractions to transfer.
      operationId: staking-stake
      tags:
        - Staking
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values passed to the invoked method.
                      required:
                        - callParams
                        - reference
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - staking.stake
                        callParams:
                          description: Parameters of the contract's internal method.
                          required:
                            - fromReference
                            - toNodeReference
                            - amount
                          properties:
                            fromReference:
                              allOf:
                                - $ref: '#/components/schemas/reference'
                                - description: >-
                                    Reference to the member's deposit or current
                                    account.
                                  example: >-
                                    insolar:1AfNjPWh7Ut-P7Ky7Mj7HLCte3gjGXi4RpXNxTvrhlww
                            toNodeReference:
                              allOf:
                                - $ref: '#/components/schemas/reference'
                                - description: Reference to the node selected for staking.
                                  example: >-
                                    insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE
                            amount:
                              type: string
                              description: >
                                An integer amount of XNS coin fractions to
                                transfer. The smallest XNS fraction is
                                `1/10^10`. To specify the amount in fractions,
                                multiply XNS by `10^10`. For example: `0.1 XNS =
                                0.1 * 10^10 = 1000000000`.
                              example: '1000000000'
                              pattern: '^[1-9][0-9]*$'
                              minLength: 1
                              maxLength: 20
                        reference:
                          allOf:
                            - $ref: '#/components/schemas/reference'
                            - description: >-
                                Reference to your `member` object. Used for user
                                identification.
                              example: >-
                                insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key of your `member` object. Used for
                            checking the `<signatureString>` created by the
                            corresponding private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
                          example: >-
                            -----BEGIN PUBLIC KEY-----

                            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC

                            F3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==

                            -----END PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/response-transferSuccess'
                  - $ref: '#/components/schemas/response-signedRequestError'
  '/api/rpc#staking.withdraw':
    post:
      summary: staking.withdraw
      description: >
        Creates a request to withdraw an amount of XNS coin fractions from a
        member's staking account to the current account.


        Withdrawal requests cannot be canceled and are processed with a delay—a
        lock period of 7 days.


        You cannot withdraw less than 1 XNS (10000000000 XNS coin fractions).


        To invoke this method, specify in `callParams`:


        * `stakeReference`—reference to the staking account to withdraw the
        funds from.

        * `amount`—amount of XNS coin fractions to transfer.
      operationId: staking-withdraw
      tags:
        - Staking
      parameters:
        - $ref: '#/components/parameters/digestHeader'
        - $ref: '#/components/parameters/signatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/request-contractCall'
                - type: object
                  required:
                    - params
                  properties:
                    params:
                      description: Parameter values passed to the invoked method.
                      required:
                        - callParams
                        - reference
                        - publicKey
                      properties:
                        callSite:
                          enum:
                            - staking.withdraw
                        callParams:
                          description: Parameters of the contract's internal method.
                          required:
                            - stakeReference
                            - amount
                          properties:
                            stakeReference:
                              allOf:
                                - $ref: '#/components/schemas/reference'
                                - description: Reference to the member's staking account.
                                  example: >-
                                    insolar:1AfNjPWh7Ut-P7Ky7Mj7HLCte3gjGXi4RpXNxTvrhlww
                            amount:
                              type: string
                              description: >
                                An integer amount of XNS coin fractions to
                                transfer. The smallest XNS fraction is
                                `1/10^10`. To specify the amount in fractions,
                                multiply XNS by `10^10`. For example: `0.1 XNS =
                                0.1 * 10^10 = 1000000000`.
                              example: '1000000000'
                              pattern: '^[1-9][0-9]*$'
                              minLength: 1
                              maxLength: 20
                        reference:
                          allOf:
                            - $ref: '#/components/schemas/reference'
                            - description: >-
                                Reference to your `member` object. Used for user
                                identification.
                              example: >-
                                insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE
                        publicKey:
                          type: string
                          pattern: >-
                            ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                            \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
                          description: >
                            Public key of your `member` object. Used for
                            checking the `<signatureString>` created by the
                            corresponding private key. Format: a [PEM
                            key](https://tools.ietf.org/html/rfc1421) in the
                            Base64 encoding.
                          example: >-
                            -----BEGIN PUBLIC KEY-----

                            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC

                            F3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==

                            -----END PUBLIC KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/response-transferSuccess'
                  - $ref: '#/components/schemas/response-signedRequestError'
tags:
  - name: Information
  - name: Member
  - name: Migration
  - name: Staking
components:
  schemas:
    request-RPCRequest:
      description: Base definition for HTTP JSON RPC 2.0 requests.
      type: object
      required:
        - jsonrpc
        - method
        - id
      properties:
        jsonrpc:
          type: string
          enum:
            - '2.0'
          description: |
            [JSON RPC protocol](https://www.jsonrpc.org/specification) version.
          example: '2.0'
        id:
          oneOf:
            - type: string
            - type: number
              nullable: true
          description: Request ID to link the request with the corresponding result.
          example: 1
        method:
          type: string
          description: Name of the method to invoke.
        params:
          type: object
      x-json-schema-id: request/RPCRequest
    definitions-responses-Seed-yaml:
      title: Success
      allOf:
        - $ref: '#/components/schemas/response-RPCResponse'
        - properties:
            result:
              type: object
              required:
                - seed
              properties:
                seed:
                  type: string
                  description: Base64-encoded string with a random range of bytes.
                  example: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=
      x-json-schema-id: definitions/responses/Seed.yaml
    response-unsignedRequestError:
      title: Errors
      description: >-
        Error response to an unsigned request. Can contain multiple errors with
        different codes.
      oneOf:
        - $ref: '#/components/schemas/schemas-response-executionError-yaml'
        - $ref: '#/components/schemas/schemas-response-timeoutError-yaml'
        - $ref: '#/components/schemas/schemas-response-internalError-yaml'
        - $ref: '#/components/schemas/schemas-response-methodNotFoundError-yaml'
        - $ref: '#/components/schemas/schemas-response-serviceUnavailable-yaml'
      properties:
        error:
          required:
            - data
          properties:
            data:
              type: object
              description: Additional error information.
              required:
                - traceID
              properties:
                traceID:
                  $ref: '#/components/schemas/traceID'
      x-json-schema-id: response/unsignedRequestError
    request-contractCall:
      description: |
        Call to a contract's `callSite`—its internal 'method'.
      type: object
      allOf:
        - $ref: '#/components/schemas/request-RPCRequest'
        - type: object
          properties:
            method:
              enum:
                - contract.call
            params:
              required:
                - callSite
                - seed
                - publicKey
              properties:
                seed:
                  type: string
                  description: 'Seed returned by [getSeed](/#operation/get-seed).'
                  example: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=
                callSite:
                  type: string
                  description: Call point for the contract's method.
                callParams:
                  type: object
                publicKey:
                  type: string
                  pattern: >-
                    ^\s*(-+BEGIN[^-]+-+\s+[a-zA-Z0-9+\/=
                    \n]+-+END[^-]+-+|[a-zA-Z0-9+\/= \n]+)\s*$
      x-json-schema-id: request/contractCall
    response-member:
      title: Success
      allOf:
        - $ref: '#/components/schemas/response-success'
        - properties:
            result:
              properties:
                callResult:
                  required:
                    - reference
                  properties:
                    reference:
                      type: string
                      pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
                      example: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'
                      x-json-schema-id: reference
                      description: Reference to the `member` object.
      x-json-schema-id: response/member
    response-signedRequestError:
      title: Errors
      description: >-
        Error response to a signed request. Can contain multiple errors with
        different codes.
      oneOf:
        - $ref: '#/components/schemas/schemas-response-executionError-yaml'
        - $ref: '#/components/schemas/schemas-response-timeoutError-yaml'
        - $ref: '#/components/schemas/schemas-response-internalError-yaml'
        - $ref: '#/components/schemas/schemas-response-invalidParamsError-yaml'
        - $ref: '#/components/schemas/schemas-response-invalidRequestError-yaml'
        - $ref: '#/components/schemas/schemas-response-methodNotFoundError-yaml'
        - $ref: '#/components/schemas/schemas-response-parseError-yaml'
        - $ref: '#/components/schemas/schemas-response-unauthorizedError-yaml'
        - $ref: '#/components/schemas/schemas-response-serviceUnavailable-yaml'
      properties:
        error:
          required:
            - data
          properties:
            data:
              type: object
              description: Additional error information.
              required:
                - requestReference
                - traceID
              properties:
                requestReference:
                  $ref: '#/components/schemas/requestReference'
                traceID:
                  $ref: '#/components/schemas/traceID'
      x-json-schema-id: response/signedRequestError
    responses-memberWithMigration-yaml:
      title: Success
      allOf:
        - $ref: '#/components/schemas/response-member'
        - properties:
            result:
              properties:
                callResult:
                  properties:
                    migrationAddress:
                      $ref: '#/components/schemas/migrationAddress'
      x-json-schema-id: responses/memberWithMigration.yaml
    reference:
      type: string
      pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
      example: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'
      x-json-schema-id: reference
    definitions-responses-transfer-yaml:
      title: Success
      allOf:
        - $ref: '#/components/schemas/response-transferSuccess'
        - properties:
            result:
              properties:
                callResult:
                  required:
                    - fee
                  properties:
                    fee:
                      type: string
                      example: '10'
                      description: Transfer fee value.
      x-json-schema-id: definitions/responses/transfer.yaml
    response-transferSuccess:
      title: Success
      description: A successful transfer response.
      allOf:
        - $ref: '#/components/schemas/response-RPCResponse'
        - properties:
            result:
              required:
                - callResult
                - requestReference
                - traceID
              properties:
                callResult:
                  type: object
                  description: Method call result.
                requestReference:
                  type: string
                  description: >-
                    Reference to a *transfer* request record. This reference is
                    equivalent to `txID`—transaction identificator.
                  example: 'insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record'
                  pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
                  x-json-schema-id: requestReference
                traceID:
                  $ref: '#/components/schemas/traceID'
      x-json-schema-id: response/transferSuccess
    response-RPCResponse:
      description: Base definition for HTTP JSON RPC 2.0 responses.
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          enum:
            - '2.0'
          description: |
            [JSON RPC protocol](https://www.jsonrpc.org/specification) version.
        id:
          oneOf:
            - type: string
            - type: number
              nullable: true
          description: ID passed by the request.
          example: 1
        result:
          type: object
          description: Execution result of the invoked method.
      x-json-schema-id: response/RPCResponse
    schemas-response-executionError-yaml:
      description: Error during the execution.
      title: executionError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31103
                message:
                  enum:
                    - Execution error.
                data:
                  required:
                    - trace
                  properties:
                    trace:
                      type: array
                      description: An array of error message(s).
                      minItems: 1
                      items:
                        type: string
                      example:
                        - '[ makeCall ] Can''t send request'
                        - >-
                          [ ContractRequester::SendRequest ] Can't route call:
                          couldn't dispatch event
                        - >-
                          RPC call returned error: [ HandleCall.handleActual ]
                          can't create request: failed to fetch index from heavy
                        - >-
                          failed to fetch object index for
                          1tJCbWvMpRjVGSMe2ApfLFKFP42pYRX7PvHrs1VCAA: index not
                          found
                    traceID:
                      example: 0b9ac245-2522-4364-9059-efc17907ce54
      x-json-schema-id: schemas/response/executionError.yaml
    schemas-response-timeoutError-yaml:
      description: Request timeout has expired.
      title: timeoutError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31106
                message:
                  enum:
                    - Request's timeout has expired.
      x-json-schema-id: schemas/response/timeoutError.yaml
    schemas-response-internalError-yaml:
      description: Internal JSON RPC error.
      title: internalError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31603
                message:
                  enum:
                    - Internal Platform error.
                data:
                  required:
                    - trace
                  properties:
                    trace:
                      type: array
                      description: An array of error message(s).
                      minItems: 1
                      items:
                        type: string
                      example:
                        - failed to get next seed
                    traceID:
                      example: 0b9ac245-2522-4364-9059-efc17907ce54
      x-json-schema-id: schemas/response/internalError.yaml
    schemas-response-methodNotFoundError-yaml:
      description: Method does not exist / is not available.
      title: methodNotFoundError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31601
                message:
                  enum:
                    - Method does not exist / is not available.
      x-json-schema-id: schemas/response/methodNotFoundError.yaml
    schemas-response-serviceUnavailable-yaml:
      description: Service is unavailable and cannot process API requests right now.
      title: unavailableError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31429
                message:
                  enum:
                    - 'Service unavailable, try again later.'
      x-json-schema-id: schemas/response/serviceUnavailable.yaml
    traceID:
      type: string
      description: Internal debugging information. May be an empty string.
      example: 0b9ac245-2522-4364-9059-efc17907ce54
      x-json-schema-id: traceID
    response-success:
      title: Success
      description: A successful response.
      allOf:
        - $ref: '#/components/schemas/response-RPCResponse'
        - properties:
            result:
              required:
                - callResult
                - requestReference
                - traceID
              properties:
                callResult:
                  type: object
                  description: Method call result.
                requestReference:
                  $ref: '#/components/schemas/requestReference'
                traceID:
                  $ref: '#/components/schemas/traceID'
      x-json-schema-id: response/success
    schemas-response-invalidParamsError-yaml:
      description: Invalid method parameter(s).
      title: invalidParamsError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31602
                message:
                  enum:
                    - Invalid method parameter(s).
      x-json-schema-id: schemas/response/invalidParamsError.yaml
    schemas-response-invalidRequestError-yaml:
      description: The JSON received is not a valid request payload.
      title: invalidRequestError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31600
                message:
                  enum:
                    - The JSON received is not a valid request payload.
      x-json-schema-id: schemas/response/invalidRequestError.yaml
    schemas-response-parseError-yaml:
      description: Received an invalid JSON.
      title: parseError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31700
                message:
                  enum:
                    - >-
                      Parsing error on the server side: received an invalid
                      JSON.
      x-json-schema-id: schemas/response/parseError.yaml
    schemas-response-unauthorizedError-yaml:
      description: Action is not authorized.
      title: unauthorizedError
      allOf:
        - $ref: '#/components/schemas/response-RPCError-yaml'
        - properties:
            error:
              properties:
                code:
                  enum:
                    - -31401
                message:
                  enum:
                    - Action is not authorized.
      x-json-schema-id: schemas/response/unauthorizedError.yaml
    requestReference:
      type: string
      description: >-
        Reference to a request record initialized by the method call. May be an
        empty string.
      example: 'insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record'
      pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
      x-json-schema-id: requestReference
    migrationAddress:
      type: string
      pattern: '^0x[a-fA-F0-9]{40}$'
      example: '0x12eB9bce34341D1163814843f8DcA44DFebe913c'
      description: >-
        Special address on the Ethereum network—transfer destination for INS
        tokens during the migration period.
      x-json-schema-id: migrationAddress
    response-RPCError-yaml:
      description: Base definition for HTTP JSON RPC 2.0 error responses.
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          enum:
            - '2.0'
          description: |
            [JSON RPC protocol](https://www.jsonrpc.org/specification) version.
        id:
          oneOf:
            - type: string
            - type: number
              nullable: true
          description: ID passed by the request.
          example: 1
        error:
          type: object
          description: Error returned by the invoked method.
          required:
            - code
            - message
          properties:
            code:
              type: integer
              description: Number that indicates the error type.
            message:
              type: string
              description: Human-readable short error message.
      x-json-schema-id: response/RPCError.yaml
  examples:
    executionError:
      x-mock-call-factor: -1
      value:
        jsonrpc: '2.0'
        id: 1
        error:
          code: -31103
          message: Execution error.
          data:
            trace:
              - '[ makeCall ] Can''t send request'
              - >-
                [ ContractRequester::SendRequest ] Can't route call: couldn't
                dispatch event
              - >-
                RPC call returned error: [ HandleCall.handleActual ] can't
                create request: failed to fetch index from Heavy Material Node
              - >-
                failed to fetch object index for
                1tJCbWvMpRjVGSMe2ApfLFKFP42pYRX7PvHrs1VCAA: index not found
            traceID: 0b9ac245-2522-4364-9059-efc17907ce54
  parameters:
    digestHeader:
      name: Digest
      in: header
      description: >
        [Digest HTTP header](https://tools.ietf.org/html/rfc3230#section-4.3.2)
        with a SHA-256 hash of the request's payload bytes in a Base64-encoded
        `<hashString>`.
      example: SHA-256=<hashString>
      required: true
      schema:
        type: string
        pattern: ^SHA-256=.+$
    signatureHeader:
      name: Signature
      in: header
      description: >
        [Signature HTTP
        header](https://tools.ietf.org/id/draft-cavage-http-signatures-11.html#sig-header)
        with the signed hash bytes in a Base64-encoded `<signatureString>`.


        The signature is:


        * in [ASN.1 DER
        format](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.690-201508-I!!PDF-E&type=items).

        * generated by an ECDSA private key.

        * checked by the paired public key (`publicKey`).
      example: >-
        keyId="member-pub-key", algorithm="ecdsa", headers="digest",
        signature=<signatureString>
      required: true
      schema:
        type: string
